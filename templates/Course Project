from flask import Flask, render_template, request, redirect, url_for, send_from_directory
import sqlite3
import os
from werkzeug.utils import secure_filename

# Get the directory of the current script
base_dir = os.path.dirname(os.path.abspath(__file__))
# Go up one directory to the Global_Crafts folder
project_dir = os.path.dirname(base_dir)

# Create a static folder for uploads if it doesn't exist
UPLOAD_FOLDER = os.path.join(project_dir, 'static', 'uploads')
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

app = Flask(__name__, 
            template_folder=os.path.join(project_dir, 'templates'),
            static_folder=os.path.join(project_dir, 'static'))

app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB max file size

# Database setup
def init_db():
    db_path = os.path.join(project_dir, 'global_crafts.db')
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    # Products table
    cursor.execute('''CREATE TABLE IF NOT EXISTS products (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        name TEXT NOT NULL,
                        description TEXT,
                        price REAL,
                        image TEXT,
                        stock INTEGER DEFAULT 10)
                   ''')
    
    # Orders table
    cursor.execute('''CREATE TABLE IF NOT EXISTS orders (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        product_id INTEGER,
                        quantity INTEGER,
                        customer_name TEXT,
                        customer_email TEXT,
                        customer_address TEXT,
                        total_price REAL,
                        FOREIGN KEY(product_id) REFERENCES products(id))
                   ''')
    
    # Insert sample products if the table is empty
    cursor.execute("SELECT COUNT(*) FROM products")
    if cursor.fetchone()[0] == 0:
        sample_products = [
            ('Handwoven Basket', 'Beautiful handwoven basket from local artisans', 45.99, 'uploads/basket.jpg', 10),
            ('Ceramic Vase', 'Elegant hand-painted ceramic vase', 29.50, 'uploads/vase.jpg', 15),
            ('Silk Scarf', 'Luxurious hand-dyed silk scarf', 79.99, 'uploads/scarf.jpg', 20)
        ]
        cursor.executemany("INSERT INTO products (name, description, price, image, stock) VALUES (?, ?, ?, ?, ?)", sample_products)
    
    conn.commit()
    conn.close()

init_db()

@app.route('/')
def home():
    db_path = os.path.join(project_dir, 'global_crafts.db')
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM products")
    products = cursor.fetchall()
    conn.close()
    return render_template('home.html', products=products)

@app.route('/product/<int:product_id>')
def product_detail(product_id):
    db_path = os.path.join(project_dir, 'global_crafts.db')
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    # Explicitly define column names
    columns = ['id', 'name', 'description', 'price', 'image', 'stock']
    
    cursor.execute("SELECT * FROM products WHERE id=?", (product_id,))
    product_data = cursor.fetchone()
    
    if not product_data:
        conn.close()
        return "Product not found", 404
    
    # Create a dictionary for easier access
    product_dict = dict(zip(columns, product_data))
    
    conn.close()
    return render_template('product.html', product=product_data, product_dict=product_dict)

@app.route('/add_product', methods=['GET', 'POST'])
def add_product():
    if request.method == 'POST':
        name = request.form['name']
        description = request.form['description']
        price = request.form['price']
        stock = request.form['stock']
        
        # Handle file upload
        if 'image' not in request.files:
            return redirect(request.url)
        file = request.files['image']
        
        if file.filename == '':
            return redirect(request.url)
        
        if file:
            filename = secure_filename(file.filename)
            filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            file.save(filepath)
            image_path = f'uploads/{filename}'
            
            db_path = os.path.join(project_dir, 'global_crafts.db')
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()
            cursor.execute("INSERT INTO products (name, description, price, image, stock) VALUES (?, ?, ?, ?, ?)", 
                           (name, description, price, image_path, stock))
            conn.commit()
            conn.close()
            
            return redirect(url_for('home'))
    
    return render_template('add_product.html')

@app.route('/order/<int:product_id>', methods=['GET', 'POST'])
def order_product(product_id):
    db_path = os.path.join(project_dir, 'global_crafts.db')
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    cursor.execute("SELECT * FROM products WHERE id=?", (product_id,))
    product = cursor.fetchone()
    
    if not product:
        conn.close()
        return "Product not found", 404
    
    if request.method == 'POST':
        quantity = int(request.form['quantity'])
        customer_name = request.form['name']
        customer_email = request.form['email']
        customer_address = request.form['address']
        
        # Check stock availability (stock is at index 5)
        if quantity > product[5]:
            conn.close()
            return "Not enough stock available", 400
        
        # Calculate total price (price is at index 3)
        total_price = product[3] * quantity
        
        # Insert order
        cursor.execute("""
            INSERT INTO orders 
            (product_id, quantity, customer_name, customer_email, customer_address, total_price) 
            VALUES (?, ?, ?, ?, ?, ?)
        """, (product_id, quantity, customer_name, customer_email, customer_address, total_price))
        
        # Update stock
        cursor.execute("UPDATE products SET stock = stock - ? WHERE id = ?", (quantity, product_id))
        
        conn.commit()
        conn.close()
        
        return render_template('order_confirmation.html', 
                               product=product, 
                               quantity=quantity, 
                               total_price=total_price)
    
    conn.close()
    return render_template('order.html', product=product)

if __name__ == '__main__':
    app.run(debug=True)
